/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package sistemabsensi.user.ui;

import java.sql.Date;
import java.sql.SQLException;
import java.sql.Time;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import sistemabsensi.user.data.DBAbsensi;
import sistemabsensi.user.data.RecordAbsen;
import sistemabsensi.user.data.Shift;

/**
 *
 * @author rss
 */
public class JPanelAbsen extends javax.swing.JPanel {

	private JFrameAbsensi frameAbsensi;
	private DBAbsensi dbAbsensi;
	private Timer timerJam; // buat tampilan jam
	private Timer timerSync; // buat update data terkini

	/**
	 * Creates new form JPanelAbsen
	 */
	public JPanelAbsen(JFrameAbsensi frameAbsensi) {
		this.frameAbsensi = frameAbsensi;
		this.dbAbsensi = frameAbsensi.getDB();
		initComponents();
		
		this.tabelData.setRowHeight(21);
		this.tabelData.setDefaultEditor(Object.class, null);

		this.timerJam = new Timer();
		this.timerJam.scheduleAtFixedRate(new TimerTask() {
			public void run() {
				LocalTime waktu = LocalTime.now();
				DateTimeFormatter format = DateTimeFormatter.ofPattern("hh:mm:ss a");

				labelWaktu.setText(waktu.format(format));
			}
		}, 0, 1000);
	}

	/**
	 * This method is called from within the constructor to initialize the
	 * form. WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                labelWaktu = new javax.swing.JLabel();
                btnAbsen = new javax.swing.JButton();
                jScrollPane1 = new javax.swing.JScrollPane();
                tabelData = new javax.swing.JTable();
                comboDaftarTanggalRecord = new javax.swing.JComboBox<>();
                btnLogout = new javax.swing.JButton();
                jScrollPane2 = new javax.swing.JScrollPane();
                jTextArea1 = new javax.swing.JTextArea();
                btnRefresh = new javax.swing.JButton();

                setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

                labelWaktu.setBackground(new java.awt.Color(255, 255, 255));
                labelWaktu.setFont(new java.awt.Font("sansserif", 0, 36)); // NOI18N
                labelWaktu.setForeground(new java.awt.Color(51, 204, 0));
                labelWaktu.setText("00:00:00 AM");
                labelWaktu.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
                add(labelWaktu, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 10, 230, 40));

                btnAbsen.setFont(new java.awt.Font("sansserif", 0, 48)); // NOI18N
                btnAbsen.setText("ABSEN");
                btnAbsen.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnAbsenActionPerformed(evt);
                        }
                });
                add(btnAbsen, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 60, 450, -1));

                tabelData.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
                tabelData.setModel(new javax.swing.table.DefaultTableModel(
                        new Object [][] {
                                {null, null, null, null},
                                {null, null, null, null},
                                {null, null, null, null},
                                {null, null, null, null}
                        },
                        new String [] {
                                "Title 1", "Title 2", "Title 3", "Title 4"
                        }
                ));
                tabelData.setShowGrid(true);
                jScrollPane1.setViewportView(tabelData);

                add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, 770, 130));

                comboDaftarTanggalRecord.setModel(new javax.swing.DefaultComboBoxModel<>());
                comboDaftarTanggalRecord.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                comboDaftarTanggalRecordActionPerformed(evt);
                        }
                });
                add(comboDaftarTanggalRecord, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 160, 180, 30));

                btnLogout.setText("Logout");
                btnLogout.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnLogoutActionPerformed(evt);
                        }
                });
                add(btnLogout, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 560, -1, 30));

                jTextArea1.setColumns(20);
                jTextArea1.setRows(5);
                jScrollPane2.setViewportView(jTextArea1);

                add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 370, 770, -1));

                btnRefresh.setText("REFRESH");
                btnRefresh.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnRefreshActionPerformed(evt);
                        }
                });
                add(btnRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));
        }// </editor-fold>//GEN-END:initComponents

	private void dapatkanDataRecord() {
		try {
			this.comboDaftarTanggalRecord.removeAllItems();

			for (RecordAbsen record : this.dbAbsensi.getDaftarRecordAbsenKaryawan(this.frameAbsensi.getKaryawan().getIdKaryawan())) {
				this.comboDaftarTanggalRecord.addItem(record.getTglRecord().toString());
			}

		} catch (SQLException ex) {
			ex.printStackTrace();
			System.exit(-1);
		}
	}

	public void dapatkanDataTerkini() {
		try {
			if (this.frameAbsensi.getKaryawan() == null) {
				return;
			}
			this.frameAbsensi.setKaryawan(this.dbAbsensi.getDataKaryawan(this.frameAbsensi.getKaryawan().getIdKaryawan()));
			updateTeksTombolAbsen();
		} catch (SQLException ex) {
			ex.printStackTrace();
			System.exit(-1);
		}
	}

	private void dapatkanDataJadwalShift() {
		DefaultTableModel model = new DefaultTableModel();
		model.addColumn("Masuk - Pulang");
		model.addColumn("Istirahat");

		Shift shift = frameAbsensi.getKaryawan().getShift();

		Object[] baris = {shift.getWaktuMasuk() + " - " + shift.getWaktuPulang(), shift.getWaktuIstirahat() + " - " + shift.getWaktuSelesaiIstirahat()};

		model.addRow(baris);

		//this.jTable1.setModel(model);
	}

	private void tampilkanPesan(String pesan) {
		JOptionPane.showMessageDialog(this, pesan);
	}

	private Time tambahkanToleransiTelat(Time waktu, int menit) {
		LocalTime time = waktu.toLocalTime();
		return Time.valueOf(time.plusMinutes(menit));
	}

	private Time tambahkanToleransiAbsenDini(Time waktu, int menit) {
		LocalTime time = waktu.toLocalTime();
		return Time.valueOf(time.minusMinutes(menit));
	}

	private boolean cekJikaDiantaraJangkaWaktu(Time min, Time waktu, Time max) {
		return (waktu.after(min) && waktu.before(max));
	}

	private boolean cekJikaSaatnyaWaktuShift(Time waktuShift) {
		final int TOLERANSI = 5; // menit

		final Time waktuSekarang = Time.valueOf(LocalTime.now());
		final Time waktuAbsenMaksimum = tambahkanToleransiTelat(waktuShift, TOLERANSI);
		final Time waktuAbsenMinimum = tambahkanToleransiAbsenDini(waktuShift, TOLERANSI);

		return cekJikaDiantaraJangkaWaktu(waktuAbsenMinimum, waktuSekarang, waktuAbsenMaksimum);
	}

	private void updateTeksTombolAbsen() {
		final Shift shift = frameAbsensi.getKaryawan().getShift();

		if (cekJikaSaatnyaWaktuShift(shift.getWaktuMasuk())) {
			this.btnAbsen.setText("ABSEN MASUK");
		} else if (cekJikaSaatnyaWaktuShift(shift.getWaktuIstirahat())) {
			this.btnAbsen.setText("ABSEN ISTIRAHAT");
		} else if (cekJikaSaatnyaWaktuShift(shift.getWaktuSelesaiIstirahat())) {
			this.btnAbsen.setText("ABSEN KEMBALI ISTIRAHAT");
		} else if (cekJikaSaatnyaWaktuShift(shift.getWaktuPulang())) {
			this.btnAbsen.setText("ABSEN KEMBALI ISTIRAHAT");
		} else {
			this.btnAbsen.setText("INVALID");
		}
	}

	private boolean sudahAbsenKembaliIstirahat() {
		return this.frameAbsensi.getKaryawan().getRecordAbsen().getWaktuSelesaiIstirahat() != null;
	}

	private boolean sudahAbsenIstirahat() {
		return this.frameAbsensi.getKaryawan().getRecordAbsen().getWaktuIstirahat() != null;
	}

	private boolean sudahAbsenMasuk() {
		return this.frameAbsensi.getKaryawan().getRecordAbsen().getWaktuMasuk() != null;
	}

	private boolean sudahAbsenPulang() {
		return this.frameAbsensi.getKaryawan().getRecordAbsen().getWaktuPulang() != null;
	}

	private Time hitungPerbedaan(Time a, Time b) {

		return null;
	}

        private void btnAbsenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbsenActionPerformed

		// TODO: 
		// PROMPT: !PULANG -> MASUK KERJA -> ((!KEMBALI ISTIRAHAT -> ISTIRAHAT -> KEMBALI ISTIRAHAT) || PULANG)
		try {
			RecordAbsen record = frameAbsensi.getKaryawan().getRecordAbsen();
			final Shift shift = frameAbsensi.getKaryawan().getShift();

			if (cekJikaSaatnyaWaktuShift(shift.getWaktuMasuk())) {

				if (sudahAbsenMasuk()) {
					this.tampilkanPesan("Anda sudah Absen Masuk");
					return;
				} else {
					record.catatWaktuMasuk();
				}

			} else if (cekJikaSaatnyaWaktuShift(shift.getWaktuIstirahat())) {

				if (sudahAbsenIstirahat()) {
					this.tampilkanPesan("Anda sudah Absen Istirahat");
					return;
				} else if (!sudahAbsenMasuk()) {
					this.tampilkanPesan("Anda Tidak Absen Masuk Hari ini!");
					return;
				} else {
					record.catatWaktuIstirahat();
				}

			} else if (cekJikaSaatnyaWaktuShift(shift.getWaktuSelesaiIstirahat())) {

				if (sudahAbsenKembaliIstirahat()) {
					this.tampilkanPesan("Anda sudah Absen Kembali Istirahat");
					return;
				} else if (!sudahAbsenIstirahat()) {
					this.tampilkanPesan("Anda Tidak Absen Istirahat Hari ini!.");
					return;
				} else {
					record.catatWaktuSelesaiIstirahat();
				}

			} else if (cekJikaSaatnyaWaktuShift(shift.getWaktuPulang())) {

				if (sudahAbsenPulang()) {
					this.tampilkanPesan("Anda sudah Absen Pulang");
					return;
				} else if (!sudahAbsenMasuk()) {
					this.tampilkanPesan("Anda Tidak Absen Masuk Hari ini!.");
					return;
				} else {
					record.catatWaktuPulang();
				}
			} else {
				this.tampilkanPesan("ANDA MENCOBA ABSEN DILUAR JAM SHIFT ANDA");
				return;
			}

			this.dbAbsensi.updateRecordAbsenKaryawan(this.frameAbsensi.getKaryawan().getRecordAbsen());
			this.frameAbsensi.setKaryawan(this.dbAbsensi.getDataKaryawan(this.frameAbsensi.getKaryawan().getIdKaryawan()));
			this.dapatkanDataRecord();

		} catch (SQLException ex) {
			ex.printStackTrace();
			System.exit(-1);
		}
        }//GEN-LAST:event_btnAbsenActionPerformed

        private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
		this.frameAbsensi.setKaryawan(null);
		this.frameAbsensi.bukaPanelLogin();
        }//GEN-LAST:event_btnLogoutActionPerformed

        private void comboDaftarTanggalRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboDaftarTanggalRecordActionPerformed
		try {
			String tanggalCombo = (String) this.comboDaftarTanggalRecord.getSelectedItem();
			if ( tanggalCombo == null || tanggalCombo.isBlank() || tanggalCombo.isEmpty() ) return;
			RecordAbsen record = dbAbsensi.getRecordAbsenKaryawan(this.frameAbsensi.getKaryawan().getIdKaryawan(), Date.valueOf(tanggalCombo));
			Shift shift = this.frameAbsensi.getKaryawan().getShift();
			DefaultTableModel model = new DefaultTableModel();

			model.addColumn("SHIFT");
			model.addColumn("JAM ABSEN");
			model.addColumn("CATATAN");

			Object[] barisMasuk = {"MASUK", record.getWaktuMasuk()};
			Object[] barisIstirahat = {"ISTIRAHAT", record.getWaktuIstirahat()};
			Object[] barisKembaliIstirahat = {"KEMBALI ISTIRAHAT", record.getWaktuSelesaiIstirahat()};
			Object[] barisPulang = {"PULANG", record.getWaktuPulang()};


			model.addRow(barisMasuk);
			model.addRow(barisIstirahat);
			model.addRow(barisKembaliIstirahat);
			model.addRow(barisPulang);

			this.tabelData.setModel(model);
		} catch (SQLException | IllegalArgumentException ex) {
			ex.printStackTrace();
			System.exit(-1);
		}
        }//GEN-LAST:event_comboDaftarTanggalRecordActionPerformed

        private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
		dapatkanData();
        }//GEN-LAST:event_btnRefreshActionPerformed


        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JButton btnAbsen;
        private javax.swing.JButton btnLogout;
        private javax.swing.JButton btnRefresh;
        private javax.swing.JComboBox<String> comboDaftarTanggalRecord;
        private javax.swing.JScrollPane jScrollPane1;
        private javax.swing.JScrollPane jScrollPane2;
        private javax.swing.JTextArea jTextArea1;
        private javax.swing.JLabel labelWaktu;
        private javax.swing.JTable tabelData;
        // End of variables declaration//GEN-END:variables

	public void dapatkanData() {
		//this.dapatkanDataJadwalShift();
		this.dapatkanDataTerkini();
		this.dapatkanDataRecord();
	}
}
