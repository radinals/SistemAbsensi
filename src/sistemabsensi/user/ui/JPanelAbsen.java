/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package sistemabsensi.user.ui;

import java.awt.event.KeyEvent;
import java.sql.Date;
import java.sql.SQLException;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import sistemabsensi.user.data.DBAbsensi;
import sistemabsensi.user.data.Karyawan;
import sistemabsensi.user.data.KategoriCatatanAbsen;
import sistemabsensi.user.data.RecordAbsen;
import sistemabsensi.user.data.Shift;

/**
 *
 * @author rss
 */
public class JPanelAbsen extends javax.swing.JPanel {

	// private static final int TOLERANSI = 5; // menit

	private DBAbsensi dbAbsensi;
	private Timer timerJam; // buat tampilan jam

	private enum ModeAbsen {
		MASUK, PULANG, ISTIRAHAT, KEMBALI_ISTIRAHAT, SUDAH_ABSEN_PULANG
	};
	
	private ModeAbsen modeAbsen = null;
	
	private Karyawan karyawan = null;

	/**
	 * Creates new form JPanelAbsen
	 */
	public JPanelAbsen() {
		this.dbAbsensi = new DBAbsensi();

		initComponents();

		// untuk membuat baris tabel lebih tinggi
		this.tabelData.setRowHeight(21);

		// agar tabel tidak bisa diedit oleh user
		this.tabelData.setDefaultEditor(Object.class, null);

		// Untuk membuat tampilan waktu, update JLabel labelWaktu tiap
		// 1000ms atau 1 detik untuk menampilkan jam terkini.
		this.timerJam = new Timer();
		this.timerJam.scheduleAtFixedRate(new TimerTask() {
			public void run() {
				LocalTime waktu = LocalTime.now();
				DateTimeFormatter format = DateTimeFormatter.ofPattern("hh:mm:ss a");

				labelWaktu.setText(waktu.format(format));
			}
		}, 0, 1000);
		
		this.clear();
	}

	/**
	 * This method is called from within the constructor to initialize the
	 * form. WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                labelWaktu = new javax.swing.JLabel();
                jScrollPane1 = new javax.swing.JScrollPane();
                tabelData = new javax.swing.JTable();
                jTextFieldID = new javax.swing.JTextField();
                jLabelNama = new javax.swing.JLabel();

                setPreferredSize(new java.awt.Dimension(800, 600));
                setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

                labelWaktu.setBackground(new java.awt.Color(255, 255, 255));
                labelWaktu.setFont(new java.awt.Font("sansserif", 0, 36)); // NOI18N
                labelWaktu.setForeground(new java.awt.Color(51, 204, 0));
                labelWaktu.setText("00:00:00 AM");
                labelWaktu.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
                add(labelWaktu, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 10, 230, 40));

                tabelData.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
                tabelData.setModel(new javax.swing.table.DefaultTableModel(
                        new Object [][] {
                                {null, null, null, null},
                                {null, null, null, null},
                                {null, null, null, null},
                                {null, null, null, null}
                        },
                        new String [] {
                                "Title 1", "Title 2", "Title 3", "Title 4"
                        }
                ));
                tabelData.setShowGrid(true);
                jScrollPane1.setViewportView(tabelData);

                add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 300, 760, 130));

                jTextFieldID.setFont(new java.awt.Font("sansserif", 0, 48)); // NOI18N
                jTextFieldID.setHorizontalAlignment(javax.swing.JTextField.CENTER);
                jTextFieldID.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jTextFieldIDActionPerformed(evt);
                        }
                });
                jTextFieldID.addKeyListener(new java.awt.event.KeyAdapter() {
                        public void keyPressed(java.awt.event.KeyEvent evt) {
                                jTextFieldIDKeyPressed(evt);
                        }
                });
                add(jTextFieldID, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, 740, 90));

                jLabelNama.setFont(new java.awt.Font("sansserif", 0, 48)); // NOI18N
                jLabelNama.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                jLabelNama.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
                add(jLabelNama, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 170, 740, 110));
        }// </editor-fold>//GEN-END:initComponents

	//-----------------------------------------------------------------------------------------------//
	// Melakukan query SELECT pada database, dapatkan data karyawan terlogin                         //
	//-----------------------------------------------------------------------------------------------//
	public void dapatkanDataTerkini() {
		try {
			if (this.karyawan == null) {
				return;
			}
			this.karyawan = this.dbAbsensi.getDataKaryawan(this.karyawan.getIdKaryawan());
			updateModeAbsen();
		} catch (SQLException ex) {
			ex.printStackTrace();
			System.exit(-1);
		}
	}

	// tampilkan peringatan dll
	private void tampilkanPesan(String pesan) {
		JOptionPane.showMessageDialog(this, pesan);
	}

	//----------------------------------------------------------------------------------------------------//
	// update teks tombol absen agar sesuai dengan waktu terkini.                                         //
	//----------------------------------------------------------------------------------------------------//
	private void updateModeAbsen() {
		if (sudahAbsenPulang()) {
			this.modeAbsen = ModeAbsen.SUDAH_ABSEN_PULANG;
			return;
		}

		if (!sudahAbsenMasuk()) {
			this.modeAbsen = ModeAbsen.MASUK;
			return;
		} else if (sudahAbsenMasuk()) {

			if (!sudahAbsenIstirahat()) {
				this.modeAbsen = ModeAbsen.ISTIRAHAT;
				return;
			} else if (sudahAbsenIstirahat() && !sudahAbsenKembaliIstirahat()) {
				this.modeAbsen = ModeAbsen.KEMBALI_ISTIRAHAT;
				return;
			}

			if (!sudahAbsenPulang()) {
				this.modeAbsen = ModeAbsen.PULANG;
				return;
			}
		}
	}

	//---------------------------------------------------------------------------------------------------//
	// Pengecekan Jika sudah Absen                                                                       //
	//                                                                                                   //
	// Data Record didapatkan dari saat login. dapat diupdate (Jika Diperlukan dengan tombol refresh     //
	//---------------------------------------------------------------------------------------------------//
	private boolean sudahAbsenKembaliIstirahat() {
		return this.karyawan.getRecordAbsen().getWaktuSelesaiIstirahat() != null;
	}

	private boolean sudahAbsenIstirahat() {
		return this.karyawan.getRecordAbsen().getWaktuIstirahat() != null;
	}

	private boolean sudahAbsenMasuk() {
		return this.karyawan.getRecordAbsen().getWaktuMasuk() != null;
	}

	private boolean sudahAbsenPulang() {
		return this.karyawan.getRecordAbsen().getWaktuPulang() != null;
	}

	/*
	
	//---------------------------------------------------------------------------------------------//
	// Kembalikan salinan waktu yang telah ditambah/dikurang menitnya                              //
	// digunakan untuk menghasilkan range/jangka waktu.                                            //
	//---------------------------------------------------------------------------------------------//
	private Time tambahkanToleransiTelat(Time waktu, int menit) {
		LocalTime time = waktu.toLocalTime();
		return Time.valueOf(time.plusMinutes(menit));
	}

	private Time tambahkanToleransiAbsenDini(Time waktu, int menit) {
		LocalTime time = waktu.toLocalTime();
		return Time.valueOf(time.minusMinutes(menit));
	}

	//----------------------------------------------------------------------------------------------//
	// Method untuk menghitung ketelatan                                                            //
	//----------------------------------------------------------------------------------------------//
	private Duration hitungPerbedaan(Time a, Time b) {
		final LocalTime x = a.toLocalTime();
		final LocalTime y = b.toLocalTime();
		return Duration.between(x, y);
	}

	public Duration hitungKetelatan(Time waktuAbsen, Time shift) {
		final Time waktuAbsenMaksimum = tambahkanToleransiTelat(shift, TOLERANSI);

		if (waktuAbsen.before(waktuAbsenMaksimum)) {
			return null; // absen sebelum waktu maksimal
		}
		return hitungPerbedaan(waktuAbsenMaksimum, waktuAbsen); // hitung waktu antara waktu absen maksimum ke waktu absen
	}

	//----------------------------------------------------------------------------------------------//
	// Method untuk mengecek apakah telat                                                           //
	//----------------------------------------------------------------------------------------------//
	public boolean isAbsenTelat(Time waktuAbsen, Time waktuShift) {
		final Time waktuAbsenMaksimum = tambahkanToleransiAbsenDini(waktuShift, TOLERANSI);
		return waktuAbsen.after(waktuAbsenMaksimum);
	}

	public boolean isAbsenLebihAwal(Time waktuAbsen, Time waktuShift) {
		final Time waktuAbsenMinimum = tambahkanToleransiTelat(waktuShift, TOLERANSI);
		return waktuAbsen.before(waktuAbsenMinimum);
	}
	
	*/

	//-----------------------------------------------------------------------------------//
	// METHOD UNTUK MELAKUKAN ABSEN                                                      //
	//-----------------------------------------------------------------------------------//
	public void absenMasuk() {

		RecordAbsen record = this.karyawan.getRecordAbsen();
		final Shift shift = this.karyawan.getShift();

		record.catatWaktuMasuk(); // catat waktu terkini

		try {
			this.dbAbsensi.updateRecordAbsenKaryawan(record);
		} catch (SQLException ex) {
			System.err.println("GAGAL MENYIMPAN ABSEN (MASUK)");
			ex.printStackTrace();
			System.exit(-1);
		}

	}

	public void absenIstirahat() {

		RecordAbsen record = this.karyawan.getRecordAbsen();
		final Shift shift = this.karyawan.getShift();

		record.catatWaktuIstirahat(); // catat waktu terkini

		try {
			this.dbAbsensi.updateRecordAbsenKaryawan(record);
		} catch (SQLException ex) {
			System.err.println("GAGAL MENYIMPAN ABSEN (ISTIRAHAT)");
			ex.printStackTrace();
			System.exit(-1);
		}

	}

	public void absenKembaliIstirahat() {
		RecordAbsen record = this.karyawan.getRecordAbsen();
		final Shift shift = this.karyawan.getShift();

		record.catatWaktuSelesaiIstirahat();// catat waktu terkini

		try {
			this.dbAbsensi.updateRecordAbsenKaryawan(record);
		} catch (SQLException ex) {
			System.err.println("GAGAL MENYIMPAN ABSEN (KEMBALI ISTIRAHAT)");
			ex.printStackTrace();
			System.exit(-1);
		}
	}

	public void absenPulang() {

		RecordAbsen record = this.karyawan.getRecordAbsen();
		final Shift shift = this.karyawan.getShift();

		record.catatWaktuPulang();// catat waktu terkini

		try {
			this.dbAbsensi.updateRecordAbsenKaryawan(record);
		} catch (SQLException ex) {
			System.err.println("GAGAL MENYIMPAN ABSEN (PULANG)");
			ex.printStackTrace();
			System.exit(-1);
		}

	}

	public void absenIzinPulang() {
		RecordAbsen record = this.karyawan.getRecordAbsen();
		final Shift shift = this.karyawan.getShift();

		record.catatWaktuPulang();// catat waktu terkini
		record.tambahkanCatatanAbsen("IZIN PULANG", KategoriCatatanAbsen.PULANG);

		try {
			this.dbAbsensi.updateRecordAbsenKaryawan(record);
		} catch (SQLException ex) {
			System.err.println("GAGAL MENYIMPAN ABSEN (IZIN PULANG)");
			ex.printStackTrace();
			System.exit(-1);
		}
	}

	//--------------------------------------------------------------------------------------------------------//
	// Update tabel ke data record sesuai tanggal                                                             //
	//--------------------------------------------------------------------------------------------------------//
	private void updateTabelData(String tanggal) {
		try {

			if (tanggal == null || tanggal.isBlank() || tanggal.isEmpty()) {
				return; // pastikan ada data tanggal
			}

			// lakukan query SELECT pada record absen.
			// dapatkan data record untuk tanggal tersebut untuk karyawan yang terlogin
			final RecordAbsen record = this.dbAbsensi.getRecordAbsenKaryawan(
				this.karyawan.getIdKaryawan(),
				Date.valueOf(tanggal)
			);

			DefaultTableModel model = new DefaultTableModel();

			model.addColumn("SHIFT");
			model.addColumn("JAM ABSEN");

			Object[] barisMasuk = {"MASUK", record.getWaktuMasuk()};
			Object[] barisIstirahat = {"ISTIRAHAT", record.getWaktuIstirahat()};
			Object[] barisKembaliIstirahat = {"KEMBALI ISTIRAHAT", record.getWaktuSelesaiIstirahat()};
			Object[] barisPulang = {"PULANG", record.getWaktuPulang()};

			model.addRow(barisMasuk);
			model.addRow(barisIstirahat);
			model.addRow(barisKembaliIstirahat);
			model.addRow(barisPulang);

			this.tabelData.setModel(model); // update tampilan data

		} catch (SQLException | IllegalArgumentException ex) {
			ex.printStackTrace();
			System.exit(-1);
		}
	}

        private void jTextFieldIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldIDActionPerformed
		// TODO add your handling code here:
        }//GEN-LAST:event_jTextFieldIDActionPerformed

	private void tampilkanDialog(String msg) {
		JOptionPane.showMessageDialog(this, msg);
	}
	
	private void clear() {
		this.karyawan = null;
		this.jLabelNama.setText("");
		this.jTextFieldID.setText("");
		this.tabelData.setModel(new DefaultTableModel());
	}


        private void jTextFieldIDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldIDKeyPressed

		if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
			this.clear();
			return;
		}
		
		if (evt.getKeyCode() != KeyEvent.VK_ENTER) return;
		
		if (jTextFieldID.getText().isEmpty()) {
			tampilkanDialog("Masukan ID!");
			jTextFieldID.requestFocus();
		} else {
			String idKaryawan = jTextFieldID.getText();
			clear();
			try {
				Karyawan karyawan = dbAbsensi.getDataKaryawan(idKaryawan);

				if (karyawan == null) {
					tampilkanDialog("Pastikan anda telah terdaftar sebagai karyawan!");
					return;
				}
				
				this.karyawan = karyawan;
				
				this.dapatkanDataTerkini();
				
				this.jLabelNama.setText(karyawan.getNamaKaryawan());
				
				this.updateModeAbsen();
				
				switch(modeAbsen) {
					case MASUK:
						absenMasuk();
						break;
					case PULANG:
						absenPulang();
						break;
					case ISTIRAHAT:
						absenIstirahat();
						break;
					case KEMBALI_ISTIRAHAT:
						absenKembaliIstirahat();
						break;
					case SUDAH_ABSEN_PULANG:
						this.jLabelNama.setText("SUDAH ABSEN PULANG");
				}
				
				this.dapatkanDataTerkini();
				this.updateTabelData(this.karyawan.getRecordAbsen().getTglRecord().toString());
				
			} catch (SQLException ex) {
				tampilkanDialog("Pastikan Anda Memasukan ID yang Benar");
				jTextFieldID.setText("");
			}

		}
		


        }//GEN-LAST:event_jTextFieldIDKeyPressed


        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JLabel jLabelNama;
        private javax.swing.JScrollPane jScrollPane1;
        private javax.swing.JTextField jTextFieldID;
        private javax.swing.JLabel labelWaktu;
        private javax.swing.JTable tabelData;
        // End of variables declaration//GEN-END:variables

}
