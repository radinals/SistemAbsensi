/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package sistemabsensi.user.ui;

import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.sql.Time;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.LinkedList;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import sistemabsensi.user.data.DBAbsensi;
import sistemabsensi.user.data.Karyawan;
import sistemabsensi.user.data.RecordAbsen;
import sistemabsensi.user.data.RecordAbsen.TipeAbsen;

/**
 *
 * @author rss
 */
public class JPanelAbsen extends javax.swing.JPanel {

	// private static final int TOLERANSI = 5; // menit
	private DBAbsensi dbAbsensi;
	private Timer timerJam; // buat tampilan jam
	
	private TipeAbsen modeAbsen = null;
	private Karyawan karyawan = null;

	/**
	 * Creates new form JPanelAbsen
	 */
	public JPanelAbsen() {
		this.dbAbsensi = new DBAbsensi();
		
		initComponents();

		// untuk membuat baris tabel lebih tinggi
		this.tabelData.setRowHeight(21);

		// agar tabel tidak bisa diedit oleh user
		this.tabelData.setDefaultEditor(Object.class, null);

		// Untuk membuat tampilan waktu, update JLabel labelWaktu tiap
		// 1000ms atau 1 detik untuk menampilkan jam terkini.
		this.timerJam = new Timer();
		this.timerJam.scheduleAtFixedRate(new TimerTask() {
			public void run() {
				LocalTime waktu = LocalTime.now();
				DateTimeFormatter format = DateTimeFormatter.ofPattern("hh:mm:ss a");
				
				labelWaktu.setText(waktu.format(format));
			}
		}, 0, 1000);
		
		this.clear();
	}

	/**
	 * This method is called from within the constructor to initialize the
	 * form. WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                labelWaktu = new javax.swing.JLabel();
                jScrollPane1 = new javax.swing.JScrollPane();
                tabelData = new javax.swing.JTable();
                jTextFieldID = new javax.swing.JTextField();
                jLabelNama = new javax.swing.JLabel();

                setPreferredSize(new java.awt.Dimension(800, 600));
                setLayout(null);

                labelWaktu.setBackground(new java.awt.Color(255, 255, 255));
                labelWaktu.setFont(new java.awt.Font("sansserif", 0, 36)); // NOI18N
                labelWaktu.setForeground(new java.awt.Color(51, 204, 0));
                labelWaktu.setText("00:00:00 AM");
                labelWaktu.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
                add(labelWaktu);
                labelWaktu.setBounds(560, 10, 230, 40);

                tabelData.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
                tabelData.setModel(new javax.swing.table.DefaultTableModel(
                        new Object [][] {
                                {null, null, null, null},
                                {null, null, null, null},
                                {null, null, null, null},
                                {null, null, null, null}
                        },
                        new String [] {
                                "Title 1", "Title 2", "Title 3", "Title 4"
                        }
                ));
                tabelData.setShowGrid(true);
                jScrollPane1.setViewportView(tabelData);

                add(jScrollPane1);
                jScrollPane1.setBounds(20, 300, 760, 130);

                jTextFieldID.setFont(new java.awt.Font("sansserif", 0, 48)); // NOI18N
                jTextFieldID.setHorizontalAlignment(javax.swing.JTextField.CENTER);
                jTextFieldID.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jTextFieldIDActionPerformed(evt);
                        }
                });
                jTextFieldID.addKeyListener(new java.awt.event.KeyAdapter() {
                        public void keyPressed(java.awt.event.KeyEvent evt) {
                                jTextFieldIDKeyPressed(evt);
                        }
                });
                add(jTextFieldID);
                jTextFieldID.setBounds(30, 60, 740, 90);

                jLabelNama.setFont(new java.awt.Font("sansserif", 0, 48)); // NOI18N
                jLabelNama.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                jLabelNama.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
                add(jLabelNama);
                jLabelNama.setBounds(30, 170, 740, 110);
        }// </editor-fold>//GEN-END:initComponents

	//-----------------------------------------------------------------------------------------------//
	// Melakukan query SELECT pada database, dapatkan data karyawan terlogin                         //
	//-----------------------------------------------------------------------------------------------//
	public void dapatkanDataTerkini() {
		try {
			if (this.karyawan == null) {
				return;
			}
			this.karyawan = this.dbAbsensi.getDataKaryawan(this.karyawan.getIdKaryawan());
		} catch (SQLException ex) {
			ex.printStackTrace();
			System.exit(-1);
		}
	}

	// tampilkan peringatan dll
	private void tampilkanPesan(String pesan) {
		JOptionPane.showMessageDialog(this, pesan);
	}

	//---------------------------------------------------------------------------------------------------//
	// Pengecekan Jika sudah Absen                                                                       //
	//                                                                                                   //
	// Data Record didapatkan dari saat login. dapat diupdate (Jika Diperlukan dengan tombol refresh     //
	//---------------------------------------------------------------------------------------------------//
	private void tentukanModeAbsen() {
		
		try {
			if (this.dbAbsensi.adaDataRecordAbsenHariIni(this.karyawan.getIdKaryawan(), TipeAbsen.ABSEN_PULANG)) {
				this.jLabelNama.setText("SUDAH ABSEN PULANG");
			} else if (!this.dbAbsensi.adaDataRecordAbsenHariIni(this.karyawan.getIdKaryawan(), TipeAbsen.ABSEN_MASUK)) {
				this.modeAbsen = TipeAbsen.ABSEN_MASUK;
			} else if (!this.dbAbsensi.adaDataRecordAbsenHariIni(this.karyawan.getIdKaryawan(), TipeAbsen.ABSEN_ISTIRAHAT)) {
				this.modeAbsen = TipeAbsen.ABSEN_ISTIRAHAT;
			} else if (!this.dbAbsensi.adaDataRecordAbsenHariIni(this.karyawan.getIdKaryawan(), TipeAbsen.ABSEN_KEMBALI_ISTIRAHAT)) {
				this.modeAbsen = TipeAbsen.ABSEN_KEMBALI_ISTIRAHAT;
			} else {
				this.modeAbsen = TipeAbsen.ABSEN_PULANG;
			}
		} catch (SQLException e) {
			e.printStackTrace();
			System.exit(-1);
		}
		
	}

	/*
	
	//---------------------------------------------------------------------------------------------//
	// Kembalikan salinan waktu yang telah ditambah/dikurang menitnya                              //
	// digunakan untuk menghasilkan range/jangka waktu.                                            //
	//---------------------------------------------------------------------------------------------//
	private Time tambahkanToleransiTelat(Time waktu, int menit) {
		LocalTime time = waktu.toLocalTime();
		return Time.valueOf(time.plusMinutes(menit));
	}

	private Time tambahkanToleransiAbsenDini(Time waktu, int menit) {
		LocalTime time = waktu.toLocalTime();
		return Time.valueOf(time.minusMinutes(menit));
	}

	//----------------------------------------------------------------------------------------------//
	// Method untuk menghitung ketelatan                                                            //
	//----------------------------------------------------------------------------------------------//
	private Duration hitungPerbedaan(Time a, Time b) {
		final LocalTime x = a.toLocalTime();
		final LocalTime y = b.toLocalTime();
		return Duration.between(x, y);
	}

	public Duration hitungKetelatan(Time waktuAbsen, Time shift) {
		final Time waktuAbsenMaksimum = tambahkanToleransiTelat(shift, TOLERANSI);

		if (waktuAbsen.before(waktuAbsenMaksimum)) {
			return null; // absen sebelum waktu maksimal
		}
		return hitungPerbedaan(waktuAbsenMaksimum, waktuAbsen); // hitung waktu antara waktu absen maksimum ke waktu absen
	}

	//----------------------------------------------------------------------------------------------//
	// Method untuk mengecek apakah telat                                                           //
	//----------------------------------------------------------------------------------------------//
	public boolean isAbsenTelat(Time waktuAbsen, Time waktuShift) {
		final Time waktuAbsenMaksimum = tambahkanToleransiAbsenDini(waktuShift, TOLERANSI);
		return waktuAbsen.after(waktuAbsenMaksimum);
	}

	public boolean isAbsenLebihAwal(Time waktuAbsen, Time waktuShift) {
		final Time waktuAbsenMinimum = tambahkanToleransiTelat(waktuShift, TOLERANSI);
		return waktuAbsen.before(waktuAbsenMinimum);
	}
	
	 */
	//-----------------------------------------------------------------------------------//
	// METHOD UNTUK MELAKUKAN ABSEN                                                      //
	//-----------------------------------------------------------------------------------//
	public void absenMasuk() { // catat waktu terkini
		try {
			this.dbAbsensi.tambahkanRecordAbsen(this.karyawan.getIdKaryawan(), RecordAbsen.TipeAbsen.ABSEN_MASUK, "");
		} catch (SQLException ex) {
			System.err.println("GAGAL MENYIMPAN ABSEN (Masuk Kerja)");
			ex.printStackTrace();
			System.exit(-1);
		}
		
	}
	
	public void absenIstirahat() {
		
		try {
			this.dbAbsensi.tambahkanRecordAbsen(this.karyawan.getIdKaryawan(), RecordAbsen.TipeAbsen.ABSEN_ISTIRAHAT, "");
		} catch (SQLException ex) {
			System.err.println("GAGAL MENYIMPAN ABSEN (Istirahat)");
			ex.printStackTrace();
			System.exit(-1);
		}
		
	}
	
	public void absenKembaliIstirahat() {
		try {
			this.dbAbsensi.tambahkanRecordAbsen(this.karyawan.getIdKaryawan(), RecordAbsen.TipeAbsen.ABSEN_KEMBALI_ISTIRAHAT, "");
		} catch (SQLException ex) {
			System.err.println("GAGAL MENYIMPAN ABSEN (Kembali Istirahat)");
			ex.printStackTrace();
			System.exit(-1);
		}
	}
	
	public void absenPulang() {
		try {
			this.dbAbsensi.tambahkanRecordAbsen(this.karyawan.getIdKaryawan(), RecordAbsen.TipeAbsen.ABSEN_PULANG, "");
		} catch (SQLException ex) {
			System.err.println("GAGAL MENYIMPAN ABSEN (Pulang Kerja)");
			ex.printStackTrace();
			System.exit(-1);
		}
		
	}

	//--------------------------------------------------------------------------------------------------------//
	// Update tabel ke data record sesuai tanggal                                                             //
	//--------------------------------------------------------------------------------------------------------//
	private void updateTabelData() {
		try {
			
			LinkedList<RecordAbsen> daftarRecord = this.dbAbsensi.getDaftarRecordAbsenKaryawanHariIni(this.karyawan.getIdKaryawan());
			
			if (daftarRecord.isEmpty()) {
				return;
			}
			
			DefaultTableModel model = new DefaultTableModel();
			
			model.addColumn("ABSEN");
			model.addColumn("JAM ABSEN");
			
			Object[] barisIstirahat = {"Istirahat", "-"};
			Object[] barisKembaliIstirahat = {"Kembali Istirahat", "-"};
			Object[] barisPulang = {"Pulang Kerja", "-"};
			Object[] barisMasuk = {"Masuk kerja", "-"};
			
			for (RecordAbsen record : daftarRecord) {
				Time waktuAbsen = Time.valueOf(record.waktu_absen.toLocalDateTime().toLocalTime());
				switch (record.tipe_absen) {
					case ABSEN_MASUK:
						barisMasuk[1] = waktuAbsen;
						break;
					case ABSEN_PULANG:
						barisPulang[1] = waktuAbsen;
						break;
					case ABSEN_ISTIRAHAT:
						barisIstirahat[1] = waktuAbsen;
						break;
					case ABSEN_KEMBALI_ISTIRAHAT:
						barisKembaliIstirahat[1] = waktuAbsen;
						break;
					default:
						throw new AssertionError(record.tipe_absen.name());
				}
			}
			
			model.addRow(barisMasuk);
			model.addRow(barisIstirahat);
			model.addRow(barisKembaliIstirahat);
			model.addRow(barisPulang);
			
			this.tabelData.setModel(model); // update tampilan data

		} catch (SQLException | IllegalArgumentException ex) {
			ex.printStackTrace();
			System.exit(-1);
		}
	}

        private void jTextFieldIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldIDActionPerformed
		// TODO add your handling code here:
        }//GEN-LAST:event_jTextFieldIDActionPerformed
	
	private void tampilkanDialog(String msg) {
		JOptionPane.showMessageDialog(this, msg);
	}
	
	private void clear() {
		this.karyawan = null;
		this.jLabelNama.setText("");
		this.jTextFieldID.setText("");
		this.tabelData.setModel(new DefaultTableModel());
	}
	

        private void jTextFieldIDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldIDKeyPressed
		
		if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
			this.clear();
			return;
		}
		
		if (evt.getKeyCode() != KeyEvent.VK_ENTER) {
			return;
		}
		
		if (jTextFieldID.getText().isEmpty()) {
			tampilkanDialog("Masukan ID!");
			jTextFieldID.requestFocus();
		} else {
			String idKaryawan = jTextFieldID.getText();
			clear();
			try {
				Karyawan karyawan = dbAbsensi.getDataKaryawan(idKaryawan);
				
				if (karyawan == null) {
					tampilkanDialog("Pastikan anda telah terdaftar sebagai karyawan!");
					return;
				}
				
				this.karyawan = karyawan;
				
				this.dapatkanDataTerkini();
				
				this.jLabelNama.setText(karyawan.getNamaKaryawan());
				
				this.tentukanModeAbsen();
				
				switch (modeAbsen) {
					case ABSEN_MASUK:
						absenMasuk();
						break;
					case ABSEN_PULANG:
						absenPulang();
						break;
					case ABSEN_ISTIRAHAT:
						absenIstirahat();
						break;
					case ABSEN_KEMBALI_ISTIRAHAT:
						absenKembaliIstirahat();
						break;
					
				}
				
				this.dapatkanDataTerkini();
				this.updateTabelData();
				
			} catch (SQLException ex) {
				tampilkanDialog("Pastikan Anda Memasukan ID yang Benar");
				jTextFieldID.setText("");
			}
			
		}
        }//GEN-LAST:event_jTextFieldIDKeyPressed


        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JLabel jLabelNama;
        private javax.swing.JScrollPane jScrollPane1;
        private javax.swing.JTextField jTextFieldID;
        private javax.swing.JLabel labelWaktu;
        private javax.swing.JTable tabelData;
        // End of variables declaration//GEN-END:variables

}
