/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package sistemabsensi.user.ui;

import java.sql.Date;
import java.sql.SQLException;
import java.sql.Time;
import java.time.Duration;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import sistemabsensi.user.data.DBAbsensi;
import sistemabsensi.user.data.KategoriCatatanAbsen;
import sistemabsensi.user.data.RecordAbsen;
import sistemabsensi.user.data.Shift;

/**
 *
 * @author rss
 */
public class JPanelAbsen extends javax.swing.JPanel {

	private static final int TOLERANSI = 5; // menit

	private JFrameAbsensi frameAbsensi;
	private DBAbsensi dbAbsensi;
	private Timer timerJam; // buat tampilan jam

	private enum ModeAbsen {
		MASUK, PULANG, ISTIRAHAT, KEMBALI_ISTIRAHAT
	};
	private ModeAbsen modeAbsen = null;

	/**
	 * Creates new form JPanelAbsen
	 */
	public JPanelAbsen(JFrameAbsensi frameAbsensi) {
		this.frameAbsensi = frameAbsensi;
		this.dbAbsensi = frameAbsensi.getDB();

		initComponents();

		// untuk membuat baris tabel lebih tinggi
		this.tabelData.setRowHeight(21);

		// agar tabel tidak bisa diedit oleh user
		this.tabelData.setDefaultEditor(Object.class, null);

		// Untuk membuat tampilan waktu, update JLabel labelWaktu tiap
		// 1000ms atau 1 detik untuk menampilkan jam terkini.
		this.timerJam = new Timer();
		this.timerJam.scheduleAtFixedRate(new TimerTask() {
			public void run() {
				LocalTime waktu = LocalTime.now();
				DateTimeFormatter format = DateTimeFormatter.ofPattern("hh:mm:ss a");

				labelWaktu.setText(waktu.format(format));
			}
		}, 0, 1000);
	}

	/**
	 * This method is called from within the constructor to initialize the
	 * form. WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                labelWaktu = new javax.swing.JLabel();
                btnAbsen = new javax.swing.JButton();
                jScrollPane1 = new javax.swing.JScrollPane();
                tabelData = new javax.swing.JTable();
                comboDaftarTanggalRecord = new javax.swing.JComboBox<>();
                btnLogout = new javax.swing.JButton();
                btnRefresh = new javax.swing.JButton();

                setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

                labelWaktu.setBackground(new java.awt.Color(255, 255, 255));
                labelWaktu.setFont(new java.awt.Font("sansserif", 0, 36)); // NOI18N
                labelWaktu.setForeground(new java.awt.Color(51, 204, 0));
                labelWaktu.setText("00:00:00 AM");
                labelWaktu.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
                add(labelWaktu, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 10, 230, 40));

                btnAbsen.setFont(new java.awt.Font("sansserif", 0, 48)); // NOI18N
                btnAbsen.setText("ABSEN");
                btnAbsen.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnAbsenActionPerformed(evt);
                        }
                });
                add(btnAbsen, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 760, -1));

                tabelData.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
                tabelData.setModel(new javax.swing.table.DefaultTableModel(
                        new Object [][] {
                                {null, null, null, null},
                                {null, null, null, null},
                                {null, null, null, null},
                                {null, null, null, null}
                        },
                        new String [] {
                                "Title 1", "Title 2", "Title 3", "Title 4"
                        }
                ));
                tabelData.setShowGrid(true);
                jScrollPane1.setViewportView(tabelData);

                add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, 770, 130));

                comboDaftarTanggalRecord.setModel(new javax.swing.DefaultComboBoxModel<>());
                comboDaftarTanggalRecord.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                comboDaftarTanggalRecordActionPerformed(evt);
                        }
                });
                add(comboDaftarTanggalRecord, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 160, 180, 30));

                btnLogout.setText("Logout");
                btnLogout.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnLogoutActionPerformed(evt);
                        }
                });
                add(btnLogout, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 560, -1, 30));

                btnRefresh.setText("REFRESH");
                btnRefresh.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnRefreshActionPerformed(evt);
                        }
                });
                add(btnRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));
        }// </editor-fold>//GEN-END:initComponents

	//--------------------------------------------------------------------------------------------------------------//
	// Melakukan query SELECT pada data record, hanya digunakan untuk mendapat tanggal-tanggal dari record yang ada //
	//--------------------------------------------------------------------------------------------------------------//
	private void isiDaftarTanggalCombo() {
		try {
			this.comboDaftarTanggalRecord.removeAllItems();

			for (RecordAbsen record : this.dbAbsensi.getDaftarRecordAbsenKaryawan(this.frameAbsensi.getKaryawan().getIdKaryawan())) {
				this.comboDaftarTanggalRecord.addItem(record.getTglRecord().toString());
			}

		} catch (SQLException ex) {
			ex.printStackTrace();
			System.exit(-1);
		}
	}

	//-----------------------------------------------------------------------------------------------//
	// Melakukan query SELECT pada database, dapatkan data karyawan terlogin                         //
	//-----------------------------------------------------------------------------------------------//
	public void dapatkanDataTerkini() {
		try {
			if (this.frameAbsensi.getKaryawan() == null) {
				return;
			}
			this.frameAbsensi.setKaryawan(this.dbAbsensi.getDataKaryawan(this.frameAbsensi.getKaryawan().getIdKaryawan()));
			updateModeAbsen();
		} catch (SQLException ex) {
			ex.printStackTrace();
			System.exit(-1);
		}
	}

	// tampilkan peringatan dll
	private void tampilkanPesan(String pesan) {
		JOptionPane.showMessageDialog(this, pesan);
	}

	//----------------------------------------------------------------------------------------------------//
	// update teks tombol absen agar sesuai dengan waktu terkini.                                         //
	//----------------------------------------------------------------------------------------------------//
	private void updateModeAbsen() {
		if (sudahAbsenPulang()) {
			this.btnAbsen.setText("- SUDAH ABSEN PULANG -");
			this.modeAbsen = null;
			return;
		}

		if (!sudahAbsenMasuk()) {
			this.btnAbsen.setText("ABSEN MASUK");
			this.modeAbsen = ModeAbsen.MASUK;
			return;
		} else if (sudahAbsenMasuk()) {

			if (!sudahAbsenIstirahat()) {
				this.btnAbsen.setText("ABSEN ISTIRAHAT");
				this.modeAbsen = ModeAbsen.ISTIRAHAT;
				return;
			} else if (sudahAbsenIstirahat() && !sudahAbsenKembaliIstirahat()) {
				this.btnAbsen.setText("ABSEN KEMBALI ISTIRAHAT");
				this.modeAbsen = ModeAbsen.KEMBALI_ISTIRAHAT;
				return;
			}

			if (!sudahAbsenPulang()) {
				this.btnAbsen.setText("ABSEN PULANG");
				this.modeAbsen = ModeAbsen.PULANG;
				return;
			}
		}
	}

	//---------------------------------------------------------------------------------------------------//
	// Pengecekan Jika sudah Absen                                                                       //
	//                                                                                                   //
	// Data Record didapatkan dari saat login. dapat diupdate (Jika Diperlukan dengan tombol refresh     //
	//---------------------------------------------------------------------------------------------------//
	private boolean sudahAbsenKembaliIstirahat() {
		return this.frameAbsensi.getKaryawan().getRecordAbsen().getWaktuSelesaiIstirahat() != null;
	}

	private boolean sudahAbsenIstirahat() {
		return this.frameAbsensi.getKaryawan().getRecordAbsen().getWaktuIstirahat() != null;
	}

	private boolean sudahAbsenMasuk() {
		return this.frameAbsensi.getKaryawan().getRecordAbsen().getWaktuMasuk() != null;
	}

	private boolean sudahAbsenPulang() {
		return this.frameAbsensi.getKaryawan().getRecordAbsen().getWaktuPulang() != null;
	}

	//---------------------------------------------------------------------------------------------//
	// Kembalikan salinan waktu yang telah ditambah/dikurang menitnya                              //
	// digunakan untuk menghasilkan range/jangka waktu.                                            //
	//---------------------------------------------------------------------------------------------//
	private Time tambahkanToleransiTelat(Time waktu, int menit) {
		LocalTime time = waktu.toLocalTime();
		return Time.valueOf(time.plusMinutes(menit));
	}

	private Time tambahkanToleransiAbsenDini(Time waktu, int menit) {
		LocalTime time = waktu.toLocalTime();
		return Time.valueOf(time.minusMinutes(menit));
	}

	//----------------------------------------------------------------------------------------------//
	// Method untuk menghitung ketelatan                                                            //
	//----------------------------------------------------------------------------------------------//
	private Duration hitungPerbedaan(Time a, Time b) {
		final LocalTime x = a.toLocalTime();
		final LocalTime y = b.toLocalTime();
		return Duration.between(x, y);
	}

	public Duration hitungKetelatan(Time waktuAbsen, Time shift) {
		final Time waktuAbsenMaksimum = tambahkanToleransiTelat(shift, TOLERANSI);

		if (waktuAbsen.before(waktuAbsenMaksimum)) {
			return null; // absen sebelum waktu maksimal
		}
		return hitungPerbedaan(waktuAbsenMaksimum, waktuAbsen); // hitung waktu antara waktu absen maksimum ke waktu absen
	}

	//----------------------------------------------------------------------------------------------//
	// Method untuk mengecek apakah telat                                                           //
	//----------------------------------------------------------------------------------------------//
	public boolean isAbsenTelat(Time waktuAbsen, Time waktuShift) {
		final Time waktuAbsenMaksimum = tambahkanToleransiAbsenDini(waktuShift, TOLERANSI);
		return waktuAbsen.after(waktuAbsenMaksimum);
	}

	public boolean isAbsenLebihAwal(Time waktuAbsen, Time waktuShift) {
		final Time waktuAbsenMinimum = tambahkanToleransiTelat(waktuShift, TOLERANSI);
		return waktuAbsen.before(waktuAbsenMinimum);
	}

	//-----------------------------------------------------------------------------------//
	// METHOD UNTUK MELAKUKAN ABSEN                                                      //
	//-----------------------------------------------------------------------------------//
	public void absenMasuk() {
		this.dapatkanData(); // memastikan absen menggunakan data terbaru

		RecordAbsen record = frameAbsensi.getKaryawan().getRecordAbsen();
		final Shift shift = frameAbsensi.getKaryawan().getShift();

		record.catatWaktuMasuk(); // catat waktu terkini

		if (isAbsenTelat(record.getWaktuMasuk(), shift.getWaktuMasuk())) { // Masuk Telat
			//final Duration ketelatan = hitungKetelatan(record.getWaktuMasuk(), shift.getWaktuMasuk());
			//final String ketelatanStr = String.format("[%d:%d:%d]", ketelatan.toHours(), ketelatan.toMinutesPart(), ketelatan.toMinutesPart());
			record.tambahkanCatatanAbsen("TERLAMBAT", KategoriCatatanAbsen.MASUK);
		} else if (isAbsenLebihAwal(record.getWaktuMasuk(), shift.getWaktuMasuk())) { // Masuk lebih Awal
			record.tambahkanCatatanAbsen("TERLALU AWAL", KategoriCatatanAbsen.MASUK);
		} else {
			record.tambahkanCatatanAbsen("TEPAT WAKTU", KategoriCatatanAbsen.MASUK);
		}

		try {
			this.dbAbsensi.updateRecordAbsenKaryawan(record);
		} catch (SQLException ex) {
			System.err.println("GAGAL MENYIMPAN ABSEN (MASUK)");
			ex.printStackTrace();
			System.exit(-1);
		}

		// pemanggilan untuk memperbarui data-data yang disimpan oleh program agar mengikuti
		// perubahan-perubahan.
		this.dapatkanData();

		updateTabelData(record.getTglRecord().toString());

	}

	public void absenIstirahat() {
		this.dapatkanData(); // memastikan absen menggunakan data terbaru

		RecordAbsen record = frameAbsensi.getKaryawan().getRecordAbsen();
		final Shift shift = frameAbsensi.getKaryawan().getShift();

		record.catatWaktuIstirahat(); // catat waktu terkini

		if (isAbsenTelat(record.getWaktuIstirahat(), shift.getWaktuIstirahat())) { // ISTIRAHAT TELAT
			record.tambahkanCatatanAbsen("TERLAMBAT", KategoriCatatanAbsen.ISTIRAHAT);
		} else if (isAbsenLebihAwal(record.getWaktuIstirahat(), shift.getWaktuIstirahat())) { // ISTIRAHAT LEBIH AWAL
			record.tambahkanCatatanAbsen("TERLALU AWAL", KategoriCatatanAbsen.ISTIRAHAT);
		} else {
			record.tambahkanCatatanAbsen("TEPAT WAKTU", KategoriCatatanAbsen.ISTIRAHAT);
		}

		try {
			this.dbAbsensi.updateRecordAbsenKaryawan(record);
		} catch (SQLException ex) {
			System.err.println("GAGAL MENYIMPAN ABSEN (ISTIRAHAT)");
			ex.printStackTrace();
			System.exit(-1);
		}

		// pemanggilan untuk memperbarui data-data yang disimpan oleh program agar mengikuti
		// perubahan-perubahan.
		this.dapatkanData();

		updateTabelData(record.getTglRecord().toString());

	}

	public void absenKembaliIstirahat() {
		RecordAbsen record = frameAbsensi.getKaryawan().getRecordAbsen();
		final Shift shift = frameAbsensi.getKaryawan().getShift();

		record.catatWaktuSelesaiIstirahat();// catat waktu terkini

		if (isAbsenTelat(record.getWaktuSelesaiIstirahat(), shift.getWaktuSelesaiIstirahat())) { // KEMBALI DARI ISTIRAHAT TELAT
			record.tambahkanCatatanAbsen("TERLAMBAT", KategoriCatatanAbsen.KEMBALI_ISTIRAHAT);
		} else {
			record.tambahkanCatatanAbsen("TEPAT WAKTU", KategoriCatatanAbsen.KEMBALI_ISTIRAHAT);
		}

		try {
			this.dbAbsensi.updateRecordAbsenKaryawan(record);
		} catch (SQLException ex) {
			System.err.println("GAGAL MENYIMPAN ABSEN (KEMBALI ISTIRAHAT)");
			ex.printStackTrace();
			System.exit(-1);
		}

		// pemanggilan untuk memperbarui data-data yang disimpan oleh program agar mengikuti
		// perubahan-perubahan.
		this.dapatkanData();

		updateTabelData(record.getTglRecord().toString());
	}

	public void absenPulang() {
		this.dapatkanData(); // memastikan absen menggunakan data terbaru

		RecordAbsen record = frameAbsensi.getKaryawan().getRecordAbsen();
		final Shift shift = frameAbsensi.getKaryawan().getShift();

		record.catatWaktuPulang();// catat waktu terkini

		if (isAbsenTelat(record.getWaktuPulang(), shift.getWaktuPulang())) {
			record.tambahkanCatatanAbsen("TERLAMBAT", KategoriCatatanAbsen.PULANG);
		} else if (isAbsenLebihAwal(record.getWaktuPulang(), shift.getWaktuPulang())) {
			record.tambahkanCatatanAbsen("TERLALU AWAL", KategoriCatatanAbsen.PULANG);
		} else {
			record.tambahkanCatatanAbsen("TEPAT WAKTU", KategoriCatatanAbsen.PULANG);
		}

		try {
			this.dbAbsensi.updateRecordAbsenKaryawan(record);
		} catch (SQLException ex) {
			System.err.println("GAGAL MENYIMPAN ABSEN (PULANG)");
			ex.printStackTrace();
			System.exit(-1);
		}

		// pemanggilan untuk memperbarui data-data yang disimpan oleh program agar mengikuti
		// perubahan-perubahan.
		this.dapatkanData();

		updateTabelData(record.getTglRecord().toString());

	}

	public void absenIzinPulang() {
		this.dapatkanData(); // memastikan absen menggunakan data terbaru

		RecordAbsen record = frameAbsensi.getKaryawan().getRecordAbsen();
		final Shift shift = frameAbsensi.getKaryawan().getShift();

		record.catatWaktuPulang();// catat waktu terkini
		record.tambahkanCatatanAbsen("IZIN PULANG", KategoriCatatanAbsen.PULANG);

		try {
			this.dbAbsensi.updateRecordAbsenKaryawan(record);
		} catch (SQLException ex) {
			System.err.println("GAGAL MENYIMPAN ABSEN (IZIN PULANG)");
			ex.printStackTrace();
			System.exit(-1);
		}

		// pemanggilan untuk memperbarui data-data yang disimpan oleh program agar mengikuti
		// perubahan-perubahan.
		this.dapatkanData();

		updateTabelData(record.getTglRecord().toString());
	}

	//-------------------------------------------------------------------------------------------------------//
	// Event tombol absen ditekan                                                                            //
	//-------------------------------------------------------------------------------------------------------//

        private void btnAbsenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbsenActionPerformed
		if (modeAbsen == null) {
			return;
		}
		switch (modeAbsen) {
			case MASUK:
				absenMasuk();
				break;
			case PULANG:
				absenPulang();
				break;
			case ISTIRAHAT:
				absenIstirahat();
				break;
			case KEMBALI_ISTIRAHAT:
				absenKembaliIstirahat();
				break;
			default:
			// TAMPILKAN ERROR

		}
        }//GEN-LAST:event_btnAbsenActionPerformed

	//-------------------------------------------------------------------------------------------------//
	// Event saat tombol logout ditekan                                                                //
	// data karyawan yang disimpan di jframe di reset dan kembali ke panel login                       //
	//-------------------------------------------------------------------------------------------------//
        private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
		this.dbAbsensi.tandaiKaryawanTerLogout(this.frameAbsensi.getKaryawan().getIdKaryawan());
		this.frameAbsensi.setKaryawan(null);
		this.frameAbsensi.bukaPanelLogin();
        }//GEN-LAST:event_btnLogoutActionPerformed

	//--------------------------------------------------------------------------------------------------------//
	// Update tabel ke data record sesuai tanggal                                                             //
	//--------------------------------------------------------------------------------------------------------//
	private void updateTabelData(String tanggal) {
		try {

			if (tanggal == null || tanggal.isBlank() || tanggal.isEmpty()) {
				return; // pastikan ada data tanggal
			}

			// lakukan query SELECT pada record absen.
			// dapatkan data record untuk tanggal tersebut untuk karyawan yang terlogin
			final RecordAbsen record = this.dbAbsensi.getRecordAbsenKaryawan(
				this.frameAbsensi.getKaryawan().getIdKaryawan(),
				Date.valueOf(tanggal)
			);

			DefaultTableModel model = new DefaultTableModel();

			model.addColumn("SHIFT");
			model.addColumn("JAM ABSEN");
			model.addColumn("CATATAN");
			
			Object[] barisMasuk = {"MASUK", record.getWaktuMasuk(), dbAbsensi.getCatatanDetailRecord(record, KategoriCatatanAbsen.MASUK)};
			Object[] barisIstirahat = {"ISTIRAHAT", record.getWaktuIstirahat(), dbAbsensi.getCatatanDetailRecord(record, KategoriCatatanAbsen.ISTIRAHAT)};
			Object[] barisKembaliIstirahat = {"KEMBALI ISTIRAHAT", record.getWaktuSelesaiIstirahat(), dbAbsensi.getCatatanDetailRecord(record, KategoriCatatanAbsen.KEMBALI_ISTIRAHAT)};
			Object[] barisPulang = {"PULANG", record.getWaktuPulang(), dbAbsensi.getCatatanDetailRecord(record, KategoriCatatanAbsen.PULANG)};

			model.addRow(barisMasuk);
			model.addRow(barisIstirahat);
			model.addRow(barisKembaliIstirahat);
			model.addRow(barisPulang);

			this.tabelData.setModel(model); // update tampilan data

		} catch (SQLException | IllegalArgumentException ex) {
			ex.printStackTrace();
			System.exit(-1);
		}
	}

	//------------------------------------------------------------------------------------------------------------//
	// Event saat sebuah data di combo box tanggal dipilih                                                        //
	//------------------------------------------------------------------------------------------------------------//
        private void comboDaftarTanggalRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboDaftarTanggalRecordActionPerformed

		final String tanggalCombo = (String) this.comboDaftarTanggalRecord.getSelectedItem();
		updateTabelData(tanggalCombo);
        }//GEN-LAST:event_comboDaftarTanggalRecordActionPerformed

        private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
		dapatkanData();
        }//GEN-LAST:event_btnRefreshActionPerformed


        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JButton btnAbsen;
        private javax.swing.JButton btnLogout;
        private javax.swing.JButton btnRefresh;
        private javax.swing.JComboBox<String> comboDaftarTanggalRecord;
        private javax.swing.JScrollPane jScrollPane1;
        private javax.swing.JLabel labelWaktu;
        private javax.swing.JTable tabelData;
        // End of variables declaration//GEN-END:variables

	public void dapatkanData() {
		//this.dapatkanDataJadwalShift();
		this.dapatkanDataTerkini();
		this.isiDaftarTanggalCombo();
		this.updateModeAbsen();
	}
}
