/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package sistemabsensi.admin.ui;

import java.sql.SQLException;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import sistemabsensi.admin.data.DBAbsensi;
import sistemabsensi.admin.data.Jabatan;
import sistemabsensi.admin.data.Karyawan;
import sistemabsensi.admin.data.Prodi;
import sistemabsensi.admin.data.Shift;

/**
 *
 * @author rss
 */
public class JPanelMasterDataKaryawan extends javax.swing.JPanel {

	/**
	 * Creates new form JPanelMasterDataKaryawan
	 */
	private DBAbsensi db;

	private Karyawan karyawanTerpilih = null;
	private Prodi prodiTerpilih = null;
	private Shift shiftTerpilih = null;
	private Jabatan jabatanTerpilih = null;
	private final JPanelMasterDataJabatan MasterDataJabatan;
	private final JPanelMasterDataProdi MasterDataProdi;
	

	public JPanelMasterDataKaryawan(DBAbsensi db) {
		this.db = db;
		initComponents();
		this.MasterDataProdi = new JPanelMasterDataProdi(db, this);
		this.MasterDataJabatan = new JPanelMasterDataJabatan(db, this);
		this.tabbedPane.add(this.MasterDataJabatan, "MasterData Jabatan");
		this.tabbedPane.add(this.MasterDataProdi, "MasterData Prodi");
		this.updateData();
	}

	/**
	 * This method is called from within the constructor to initialize the
	 * form. WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                jPanel1 = new javax.swing.JPanel();
                jScrollPane1 = new javax.swing.JScrollPane();
                tabelData = new javax.swing.JTable();
                jPanel9 = new javax.swing.JPanel();
                jLabel6 = new javax.swing.JLabel();
                textFieldID = new javax.swing.JTextField();
                jLabel1 = new javax.swing.JLabel();
                textFieldNama = new javax.swing.JTextField();
                jLabel3 = new javax.swing.JLabel();
                comboBoxProdi = new javax.swing.JComboBox<>();
                jLabel2 = new javax.swing.JLabel();
                comboBoxJabatan = new javax.swing.JComboBox<>();
                jLabel7 = new javax.swing.JLabel();
                comboBoxShift = new javax.swing.JComboBox<Shift>();
                jLabel4 = new javax.swing.JLabel();
                textFieldTelp = new javax.swing.JTextField();
                jLabel5 = new javax.swing.JLabel();
                textFieldAlamat = new javax.swing.JTextField();
                jLabel8 = new javax.swing.JLabel();
                textFieldEmail = new javax.swing.JTextField();
                btnSimpan = new javax.swing.JButton();
                btnHapus = new javax.swing.JButton();
                tabbedPane = new javax.swing.JTabbedPane();

                setMaximumSize(new java.awt.Dimension(991, 599));
                setPreferredSize(new java.awt.Dimension(991, 599));
                setLayout(new java.awt.BorderLayout());

                jPanel1.setLayout(null);

                tabelData.setModel(new javax.swing.table.DefaultTableModel(
                        new Object [][] {
                                {null, null, null, null},
                                {null, null, null, null},
                                {null, null, null, null},
                                {null, null, null, null}
                        },
                        new String [] {
                                "Title 1", "Title 2", "Title 3", "Title 4"
                        }
                ));
                tabelData.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
                tabelData.setShowGrid(true);
                tabelData.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                                tabelDataMouseClicked(evt);
                        }
                });
                jScrollPane1.setViewportView(tabelData);

                jPanel1.add(jScrollPane1);
                jScrollPane1.setBounds(40, 430, 1290, 250);

                jPanel9.setLayout(new java.awt.GridLayout(9, 2));

                jLabel6.setText("ID");
                jPanel9.add(jLabel6);
                jPanel9.add(textFieldID);

                jLabel1.setLabelFor(textFieldNama);
                jLabel1.setText("NAMA");
                jPanel9.add(jLabel1);
                jPanel9.add(textFieldNama);

                jLabel3.setLabelFor(comboBoxProdi);
                jLabel3.setText("PRODI");
                jPanel9.add(jLabel3);

                comboBoxProdi.setModel(new javax.swing.DefaultComboBoxModel<>());
                jPanel9.add(comboBoxProdi);

                jLabel2.setLabelFor(comboBoxJabatan);
                jLabel2.setText("JABATAN");
                jPanel9.add(jLabel2);

                comboBoxJabatan.setModel(new javax.swing.DefaultComboBoxModel<>());
                jPanel9.add(comboBoxJabatan);

                jLabel7.setText("SHIFT");
                jPanel9.add(jLabel7);

                comboBoxShift.setModel(new javax.swing.DefaultComboBoxModel<>());
                jPanel9.add(comboBoxShift);

                jLabel4.setText("NO TELP/HP");
                jPanel9.add(jLabel4);
                jPanel9.add(textFieldTelp);

                jLabel5.setText("ALAMAT");
                jPanel9.add(jLabel5);
                jPanel9.add(textFieldAlamat);

                jLabel8.setText("EMAIL");
                jPanel9.add(jLabel8);
                jPanel9.add(textFieldEmail);

                jPanel1.add(jPanel9);
                jPanel9.setBounds(54, 50, 440, 310);

                btnSimpan.setText("SIMPAN");
                btnSimpan.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnSimpanActionPerformed(evt);
                        }
                });
                jPanel1.add(btnSimpan);
                btnSimpan.setBounds(50, 360, 220, 42);

                btnHapus.setText("HAPUS");
                btnHapus.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnHapusActionPerformed(evt);
                        }
                });
                jPanel1.add(btnHapus);
                btnHapus.setBounds(280, 360, 220, 42);
                jPanel1.add(tabbedPane);
                tabbedPane.setBounds(510, 50, 810, 350);

                add(jPanel1, java.awt.BorderLayout.CENTER);
        }// </editor-fold>//GEN-END:initComponents

        private void tabelDataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelDataMouseClicked
		int barisTerpilih = this.tabelData.getSelectedRow();
		String idKaryawan = (String) this.tabelData.getModel().getValueAt(barisTerpilih, 0);
		this.getDataTerpilih(idKaryawan);
        }//GEN-LAST:event_tabelDataMouseClicked

        private void btnSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimpanActionPerformed
		// UPDATE OR INSERT

		if (!isFieldInputTerisiSemua()) {
			return;
		}
		
		Karyawan dataKaryawanField = dapatkanDataFieldInput();

		try {
			db.simpanDataKaryawan(dataKaryawanField);
		} catch (SQLException ex) {
			Logger.getLogger(JPanelMasterDataKaryawan.class.getName()).log(Level.SEVERE, null, ex);
		}

		this.updateData();
        }//GEN-LAST:event_btnSimpanActionPerformed

        private void btnHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusActionPerformed
		if (this.textFieldID.getText().isEmpty()) {
			this.textFieldID.requestFocus();
			Pesan.tampilkanPeringatan("Pastikan ID Terisi!");
			return;
		}

		if (!this.db.isDataKaryawanAda(this.textFieldID.getText())) {
			this.textFieldID.requestFocus();
			Pesan.tampilkanPeringatan("Tidak ditemukan data yang Ber-ID: " + this.textFieldID.getText() + ". Pastikan ID valid!");
			return;
		}

		if (!Pesan.tampilkanKonfirmasi("Konfirmasi Penghapusan Data",
			"Anda Yakin ingin menghapus Data karyawan Ber-ID: " + this.textFieldID.getText() + "?.")) {
			return;
		}

		try {
			this.db.deleteDataKaryawan(this.textFieldID.getText());
		} catch (SQLException ex) {
			Logger.getLogger(JPanelMasterDataKaryawan.class.getName()).log(Level.SEVERE, null, ex);
		}

		this.updateData();
        }//GEN-LAST:event_btnHapusActionPerformed

	public void updateData() {
		this.karyawanTerpilih = null;
		this.prodiTerpilih = null;
		this.shiftTerpilih = null;
		this.jabatanTerpilih = null;
		this.textFieldAlamat.setText("");
		this.textFieldEmail.setText("");
		this.textFieldID.setText("");
		this.textFieldNama.setText("");
		this.textFieldTelp.setText("");
		dapatkanData();
	}

	private boolean isFieldInputTerisiSemua() {
		if (this.textFieldID.getText().isEmpty()) {
			textFieldID.requestFocus();
			Pesan.tampilkanPeringatan("ID Masih Kosong");
			return false;
		} else if (this.textFieldNama.getText().isEmpty()) {
			textFieldNama.requestFocus();
			Pesan.tampilkanPeringatan("Nama masih Kosong");
			return false;
		} else if (this.textFieldTelp.getText().isEmpty()) {
			this.textFieldTelp.requestFocus();
			Pesan.tampilkanPeringatan("Masukan Nomor Telpon Karyawan");
			return false;
		} else if (this.textFieldAlamat.getText().isEmpty()) {
			this.textFieldAlamat.requestFocus();
			Pesan.tampilkanPeringatan("Masukan Alamat Rumah Karyawan");
			return false;
		} else if (this.textFieldEmail.getText().isEmpty()) {
			this.textFieldEmail.requestFocus();
			Pesan.tampilkanPeringatan("Masukan Alamat Email Karyawan");
			return false;
		} else if (this.comboBoxJabatan.getSelectedItem() == null) {
			this.comboBoxJabatan.requestFocus();
			Pesan.tampilkanPeringatan("Tentukan Jabatan Karyawan");
			return false;
		} else if (this.comboBoxShift.getSelectedItem() == null) {
			this.comboBoxShift.requestFocus();
			Pesan.tampilkanPeringatan("Tentukan Shift Karyawan");
			return false;
		} else if (this.comboBoxProdi.getSelectedItem() == null) {
			this.comboBoxProdi.requestFocus();
			Pesan.tampilkanPeringatan("Tentukan Prodi Karyawan");
			return false;
		}

		return true;
	}

	private Karyawan dapatkanDataFieldInput() {
		Karyawan karyawan = new Karyawan();

		karyawan.idKaryawan = this.textFieldID.getText();
		karyawan.namaKaryawan = this.textFieldNama.getText();
		karyawan.alamat = this.textFieldAlamat.getText();
		karyawan.noTelepon = this.textFieldTelp.getText();
		karyawan.email = this.textFieldEmail.getText();

		final Jabatan jabatan = (Jabatan) this.comboBoxJabatan.getSelectedItem();
		final Prodi prodi = (Prodi) this.comboBoxProdi.getSelectedItem();
		final Shift shift = (Shift) this.comboBoxShift.getSelectedItem();

		karyawan.idJabatan = jabatan.idJabatan;
		karyawan.idShift = shift.idShift;
		karyawan.idProdi = prodi.id;

		return karyawan;
	}

	private void tampilkanDataTerpilih() {
		this.textFieldID.setText(this.karyawanTerpilih.idKaryawan);
		this.textFieldNama.setText(this.karyawanTerpilih.namaKaryawan);
		this.textFieldAlamat.setText(this.karyawanTerpilih.alamat);
		this.textFieldTelp.setText(this.karyawanTerpilih.noTelepon);
		this.textFieldEmail.setText(this.karyawanTerpilih.email);
		this.isiDataDataComboBox();
	}

	private void getDataTerpilih(String idKaryawan) {
		try {
			Object[] data = this.db.getDataKaryawan(idKaryawan);

			this.karyawanTerpilih = (Karyawan) data[0];
			this.prodiTerpilih = (Prodi) data[1];
			this.jabatanTerpilih = (Jabatan) data[2];
			this.shiftTerpilih = (Shift) data[3];

			this.tampilkanDataTerpilih();
			this.isiDataDataComboBox();
		} catch (SQLException ex) {
			Logger.getLogger(JPanelMasterDataKaryawan.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

	private void isiDataComboBoxShift() {
		this.comboBoxShift.removeAllItems();
		try {
			LinkedList<Shift> dataShift = db.getDaftarDataShift();

			for (Shift shift : dataShift) {
				if (this.shiftTerpilih != null && this.shiftTerpilih.equals(shift)) {
					continue;
				}
				this.comboBoxShift.addItem(shift);
			}
			if (this.shiftTerpilih != null) {
				this.comboBoxShift.addItem(this.shiftTerpilih);
				this.comboBoxShift.setSelectedItem(this.shiftTerpilih);
			}else if (this.shiftTerpilih == null) {
				this.comboBoxShift.setSelectedItem(null);
			}
			

		} catch (SQLException ex) {
			Logger.getLogger(JPanelMasterDataKaryawan.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

	private void isiDataComboBoxJabatan() {
		this.comboBoxJabatan.removeAllItems();
		try {
			LinkedList<Jabatan> dataJabatan;
			dataJabatan = db.getDaftarDataJabatan();
			for (Jabatan jabatan : dataJabatan) {
				if (this.jabatanTerpilih != null && this.jabatanTerpilih.equals(jabatan)) {
					continue;
				}
				this.comboBoxJabatan.addItem(jabatan);
			}
			if (this.jabatanTerpilih != null) {
				this.comboBoxJabatan.addItem(this.jabatanTerpilih);
				this.comboBoxJabatan.setSelectedItem(this.jabatanTerpilih);
			}else if (this.jabatanTerpilih == null) {
				this.comboBoxJabatan.setSelectedItem(null);
			}
			
			
		
			
		} catch (SQLException ex) {
			Logger.getLogger(JPanelMasterDataKaryawan.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

	private void isiDataComboBoxProdi() {
		this.comboBoxProdi.removeAllItems();
		try {
			LinkedList<Prodi> dataProdi;
			dataProdi = db.getDaftarDataProdi();
			for (Prodi prodi : dataProdi) {
				if (this.prodiTerpilih != null && this.prodiTerpilih.equals(prodi)) {
					continue;
				}
				this.comboBoxProdi.addItem(prodi);
			}

			if (this.prodiTerpilih != null) {
				this.comboBoxProdi.addItem(this.prodiTerpilih);
				this.comboBoxProdi.setSelectedItem(this.prodiTerpilih);
			}else if (this.prodiTerpilih == null) {
				this.comboBoxProdi.setSelectedItem(null);
			}
			
		} catch (SQLException ex) {
			Logger.getLogger(JPanelMasterDataKaryawan.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

	private void isiDataDataComboBox() {
		this.isiDataComboBoxShift();
		this.isiDataComboBoxJabatan();
		this.isiDataComboBoxProdi();
	}

	private void dapatkanData() {
		try {
			this.tabelData.setModel(db.getModelTabel_Karyawan());
			this.isiDataDataComboBox();
		} catch (SQLException ex) {
			Logger.getLogger(JPanelMasterDataKaryawan.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JButton btnHapus;
        private javax.swing.JButton btnSimpan;
        private javax.swing.JComboBox<Jabatan> comboBoxJabatan;
        private javax.swing.JComboBox<Prodi> comboBoxProdi;
        private javax.swing.JComboBox<Shift> comboBoxShift;
        private javax.swing.JLabel jLabel1;
        private javax.swing.JLabel jLabel2;
        private javax.swing.JLabel jLabel3;
        private javax.swing.JLabel jLabel4;
        private javax.swing.JLabel jLabel5;
        private javax.swing.JLabel jLabel6;
        private javax.swing.JLabel jLabel7;
        private javax.swing.JLabel jLabel8;
        private javax.swing.JPanel jPanel1;
        private javax.swing.JPanel jPanel9;
        private javax.swing.JScrollPane jScrollPane1;
        private javax.swing.JTabbedPane tabbedPane;
        private javax.swing.JTable tabelData;
        private javax.swing.JTextField textFieldAlamat;
        private javax.swing.JTextField textFieldEmail;
        private javax.swing.JTextField textFieldID;
        private javax.swing.JTextField textFieldNama;
        private javax.swing.JTextField textFieldTelp;
        // End of variables declaration//GEN-END:variables
}
